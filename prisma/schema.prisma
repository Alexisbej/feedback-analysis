generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum FeedbackChannel {
  QR_CODE
  DIRECT_LINK
  EMAIL
  SMS
}

enum FeedbackSentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

model User {
  id              String        @id @default(uuid())
  email           String        @unique
  emailVerified   DateTime?
  name            String?
  password        String?   
  role            Role          @default(USER)
  tenants         Tenant[]      // Admins can manage multiple tenants
  createdTenants  Tenant[]      @relation("TenantOwner")
  feedbacks       Feedback[]
  auditLogs       AuditLog[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  resetToken      String?
  resetExpires    DateTime?
  consent         Boolean    @default(false)
}

model Tenant {
  id              String        @id @default(uuid())
  name            String
  slug            String        @unique
  owner           User          @relation("TenantOwner", fields: [ownerId], references: [id])
  ownerId         String
  users           User[] 
  feedbacks       Feedback[]
  templates       Template[]
  settings        TenantSettings?
  subscription    Subscription?
  auditLogs       AuditLog[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Feedback {
  id              String        @id @default(uuid())
  content         String
  rating          Int?          @db.SmallInt
  sentiment       FeedbackSentiment?
  metadata        Json?         // Store IP, device info, etc.
  channel         FeedbackChannel
  tenant          Tenant        @relation(fields: [tenantId], references: [id])
  tenantId        String
  template        Template?     @relation(fields: [templateId], references: [id])
  templateId      String?
  user            User?         @relation(fields: [userId], references: [id])
  userId          String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([tenantId])
  @@index([createdAt])
}

model Template {
  id              String        @id @default(uuid())
  name            String
  fields          Json         // Custom form configuration
  tenant          Tenant        @relation(fields: [tenantId], references: [id])
  tenantId        String
  feedbacks       Feedback[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model TenantSettings {
  id              String        @id @default(uuid())
  tenant          Tenant        @relation(fields: [tenantId], references: [id])
  tenantId        String        @unique
  logoUrl         String?
  brandColor      String?       @default("#2563eb")
  locale          String?       @default("en")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Subscription {
  id              String        @id @default(uuid())
  tenant          Tenant        @relation(fields: [tenantId], references: [id])
  tenantId        String        @unique
  plan            Plan          @default(FREE)
  status          Status        @default(ACTIVE)
  stripeId        String?
  currentPeriod   DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model AuditLog {
  id              String        @id @default(uuid())
  action          String
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  tenants         Tenant[]
  tenantId        String?
  ipAddress       String?
  userAgent       String?
  createdAt       DateTime      @default(now())
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum Status {
  ACTIVE
  CANCELED
  TRIALING
}