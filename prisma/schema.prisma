generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums from your existing model
enum Role {
  ADMIN
  USER
}

enum FeedbackChannel {
  QR_CODE
  DIRECT_LINK
  EMAIL
  SMS
}

enum FeedbackSentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum Status {
  ACTIVE
  CANCELED
  TRIALING
}

enum QuestionType {
  TEXT
  RATING
  MULTIPLE_CHOICE
}

// The merged User model â€“ combining your fields with Auth.js fields
model User {
  id              String            @id @default(cuid())
  email           String            @unique
  emailVerified   DateTime?
  name            String?
  image           String?           // from Auth.js
  password        String?           // your custom field
  role            Role              @default(USER)
  onboardingCompleted Boolean       @default(false)
  resetToken      String?
  resetExpires    DateTime?
  consent         Boolean           @default(false)
  
  // Relations from your original model
  tenants         Tenant[]        // Tenants this user belongs to
  createdTenants  Tenant[]        @relation("TenantOwner")
  feedbacks       Feedback[]
  auditLogs       AuditLog[]

  // Relations required by Auth.js
  accounts        Account[]
  sessions        Session[]
  authenticators  Authenticator[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String    @unique
  userId       String
  expires      DateTime
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// --- Your existing models below ---

model Tenant {
  id              String         @id @default(uuid())
  name            String
  slug            String         @unique
  owner           User           @relation("TenantOwner", fields: [ownerId], references: [id])
  ownerId         String
  users           User[]
  feedbacks       Feedback[]
  templates       Template[]
  settings        TenantSettings?
  subscription    Subscription?
  auditLogs       AuditLog[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Feedback {
  id              String           @id @default(uuid())
  content         String
  rating          Int?             @db.SmallInt
  sentiment       FeedbackSentiment?
  metadata        Json?            // For storing IP, device info, etc.
  tenant          Tenant           @relation(fields: [tenantId], references: [id])
  tenantId        String
  template        Template?        @relation(fields: [templateId], references: [id])
  templateId      String?
  user            User?            @relation(fields: [userId], references: [id])
  userId          String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([tenantId])
  @@index([createdAt])
}

model FeedbackLink {
  id              String    @id @default(uuid())
  template        Template  @relation(fields: [templateId], references: [id])
  templateId      String
  url             String    @unique
  qrCodeImage     String?
  expiration      DateTime?
  usageLimit      Int?
  currentUsage    Int       @default(0)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
}

model Template {
  id              String        @id @default(uuid())
  name            String
  fields          Question[]    
  tenant          Tenant        @relation(fields: [tenantId], references: [id])
  tenantId        String
  feedbacks       Feedback[]
  feedbackLinks   FeedbackLink[]
  distributionMethod FeedbackChannel @default(QR_CODE)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Question {
  id              String        @id @default(uuid())  
  question        String
  type            QuestionType
  options         String[]
  template        Template      @relation(fields: [templateId], references: [id])
  templateId      String
} 

model TenantSettings {
  id              String        @id @default(uuid())
  tenant          Tenant        @relation(fields: [tenantId], references: [id])
  tenantId        String        @unique
  logoUrl         String?
  brandColor      String?       @default("#2563eb")
  locale          String?       @default("en")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Subscription {
  id              String        @id @default(uuid())
  tenant          Tenant        @relation(fields: [tenantId], references: [id])
  tenantId        String        @unique
  plan            Plan          @default(FREE)
  status          Status        @default(ACTIVE)
  stripeId        String?
  currentPeriod   DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model AuditLog {
  id              String        @id @default(uuid())
  action          String
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  tenants         Tenant[]
  tenantId        String?
  ipAddress       String?
  userAgent       String?
  createdAt       DateTime      @default(now())
}
